
/* drvSerial.c */
/* 	$Id: drvSerial.c.jeff,v 1.1 2000/04/20 01:37:13 peregrin Exp $ */
/*
 *      EPICS STDIO Driver Support (for serial devices)
 *
 *      Author:         Jeffrey O. Hill (LANL)
 *			johill@lanl.gov
 *			(505) 665 1831
 *			(for the KECK Astronomy Center)
 *
 *      Date:           6-6-95
 *
 * Modification Log:
 * -----------------
 * 	$Log: drvSerial.c.jeff,v $
 * 	Revision 1.1  2000/04/20 01:37:13  peregrin
 * 	End of April bright time devel.
 * 	
 * 	Revision 1.6  1999/12/23 16:55:38  hill
 * 	fixed warnings drvAbdf1.c
 *
 * 	Revision 1.5  1999/09/14 15:17:54  hill
 * 	increased queue size
 *
 * 	Revision 1.4  1998/02/11 23:26:08  aptdvl
 * 	1st production release
 *
 * Revision 1.4  1995/09/08  20:27:57  jhill
 * dont copy all unused bytes in buffer optimization
 *
 * Revision 1.3  1995/09/08  19:54:10  jhill
 * improved conversion between array index and enum priority
 *
 * Revision 1.2  1995/08/28  02:37:14  jhill
 * use VX_FP_TASK
 *
 * Revision 1.1  1995/08/24  07:12:41  jhill
 * installed into cvs
 *
 *
 * 	FUNCTIONAL REQUIREMENTS
 *
 * .01	This source will shield applications from the complexities
 *	of non-blocking io. The database scan tasks must not be blocked
 *	by system io calls. Instead, the tasks created by this source
 *	are allowed to block.
 *
 * .02  This source will provide for framing of the input
 *	stream into individual messages from the attached serial devices 
 *	to higher level applications.
 *
 * .03 	This source shall will detect when the link goes down and
 * 	periodically attempt to restart the link if it is down.
 *
 * .04	This source will provide for multi-priority request queuing
 *	so that higher priority requests are processed first when
 *	communicating with slow devices
 *
 * NOTES:
 *
 * .01 	I do _not_ turn off stdio buffering here because an fflush()
 *	call is made each time that the request queue is drained. 
 *	Therefore stdio buffer should not disable priority based 
 *	request queuing.
 *
 * .02	I open two file streams (one for the read task and one for 
 *	the write task). WRS indicates that file pointers should 
 *	be private to individual tasks because the stdio library isnt 
 *	thread safe. This requires two file descriptors on one device 
 *	(one for reading only and one for writing only). I suspect 
 *	that most vxWorks serial device drivers will support this.
 *  When the connection is reset then I use FIOCANCEL ioctl on the
 *  read/write file descriptors involved in order to force both 
 *  tasks to reopen their files.
 */

/*
 * ANSI C
 */
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

/*
 * vxWorks
 */
#include <semLib.h>
#include <taskLib.h>
#include <sysLib.h>
#include <ioLib.h>

/*
 * EPICS
 */
#include <epicsAssert.h>
#include <ellLib.h>		/* requires stdlib.h */
#include <devLib.h>		/* requires stdlib.h */
#include <bucketLib.h>
#include <freeList.h>
#include <epicsPrint.h>

#define drvSerialGlobal /* allocate space for externals here */
#include <drvSerial.h>

#define TICKS_PER_SEC (sysClkRateGet())
#define WAIT_N_SEC(N) {taskDelay(TICKS_PER_SEC*(N));}

/*
 * task creation options
 */
#define tp_drvSerialPriority 55 	
#define tp_drvSerialOptions VX_FP_TASK 	/* none */
#define tp_drvSerialStackSize 0x1000	/* 4096 */

/*
 * maximum size of the request and response queue
 * respectively
 */
#define requestQueueQuota 100
#define responseQueueQuota 100

typedef enum {dsReq, dsRes, dsResv, dsLimbo, dsFree}dsQueue;
typedef struct {
	ELLNODE node;
	union {
		drvSerialResponse res;
		drvSerialRequest req;
	}shr;
	char queue;
	char pri;
}freeListItem;


/*
 * The limbo queue here is where items are stored prior to being
 * added to an operational queue so that we dont loose them if the
 * task is deleted (I use task delete safe mutex lock).
 */
typedef struct drvSerialParmTag
{
	ELLNODE node;
	char pName[512];
	SEM_ID mutexSem;
	SEM_ID writeQueueSem;
	SEM_ID readQueueSem;
	ELLLIST requestQueues[dspHighest - dspLowest + 1];
	ELLLIST reserveQueues[dspHighest - dspLowest + 1];
	ELLLIST respQueue;
	ELLLIST	limboQueue; 
	drvSerialParseInput *pInputParser;
	void *pFreeListPVT;
	void *pAppPrivate;
	FILE *pRF; /* only touched by the read task */
	FILE *pWF; /* only touched by the write task */
	ELLLIST *pHighestPriReqQue;
	int rdTaskId;
	int wtTaskId;
	unsigned readCanceled:1;
	unsigned writeCanceled:1;
} drvSerialParm;

/*
 * drvSerial.c globals
 */
LOCAL struct
{
	char tmpName[512];
	ELLLIST list;
	SEM_ID lock;
	BUCKET *pBucket;
} devNameTbl;

/*
 * driver support entry table
 */
typedef long drvInitFunc_t(void);
typedef long drvSerialReport_t(int level);
LOCAL drvSerialReport_t drvSerialReport;
LOCAL drvInitFunc_t drvSerialInit;
struct
{
	long number;
	drvSerialReport_t *report;
	drvInitFunc_t *init;
} drvSerial =
{
	2L,
	drvSerialReport,
	drvSerialInit
};

LOCAL freeListItem 	*drvSerialFetchFreeItem (drvSerialParm *pDev);
LOCAL void drvSerialDisposeFreeItem (drvSerialParm *pDev, 
				freeListItem * pItem);
LOCAL void drvSerialLinkReset (drvSerialParm * pDev);
LOCAL int sendAllRequests (drvSerialParm *pDev);
LOCAL drvSerialParm *drvSerialTestExist (const char *pName);
LOCAL int drvSerialLinkOpen (drvSerialParm * pDev);
LOCAL int drvSerialWrite (drvSerialParm * pDev);
LOCAL int drvSerialRead (drvSerialParm * pDev);
LOCAL freeListItem *fetchHighestPriorityRequest (drvSerialParm *pDev);

LOCAL void drvSerialCopyResponse(
	drvSerialResponse *pDest, 
	const drvSerialResponse *pSrc);
LOCAL void drvSerialCopyRequest(
	drvSerialRequest *pDest, 
	const drvSerialRequest *pSrc);

#ifdef TEST_DRV_SERIAL
void drvSerialTest(const char *pName);
LOCAL int drvSerialTestParser (FILE *pf, drvSerialResponse *pResp, 
				void *pAppPrivate);
LOCAL int drvSerialTestXmit (FILE *pf, drvSerialRequest *pReq);

/*
 * drvSerialTest ()
 */
void drvSerialTest (const char *pName)
{
	drvSerialLinkId id;
	drvSerialRequest req;
	int status;

	status = drvSerialInit();
	assert (status==OK);

	status = drvSerialCreateLink(pName, 	
			drvSerialTestParser,NULL,&id);
	assert (status==OK);

	memset(&req, '\0', sizeof(req));
	strcpy((char *)req.buf, "Test Test\n");
	req.bufCount = strlen((char *)req.buf);
	req.pCB = drvSerialTestXmit;

	while (TRUE) {
		status = drvSerialSendRequest (id, dspLow, &req);
		if (	status != S_drvSerial_OK && 
			status != S_drvSerial_queueFull &&
			status != S_drvSerial_linkDown) {
			errMessage(status, NULL);
		}
		taskDelay(10);
	}
}

LOCAL int drvSerialTestXmit (FILE *pf, drvSerialRequest *pReq)
{
	unsigned char *pBuf;
	int s=0;

	for (pBuf=pReq->buf; pBuf<&pReq->buf[pReq->bufCount]; pBuf++) {
		s = putc(*pBuf, pf);
		if (s == EOF) {
			break;
		}
	}
	return s;
}

LOCAL int drvSerialTestParser (FILE *pf, drvSerialResponse *pResp, 
				void *pAppPrivate)
{
	int c;

	while ( (c=getc(pf))!=EOF) {
#		if 0
			putc(c, stdout);
#		endif		
	}
	return c;
}

#endif

/*
 * drvSerialCopyRequest()
 *
 * Copy a source request into a destination request
 * (dont copy unused bytes)
 */
LOCAL void drvSerialCopyRequest(
drvSerialRequest *pDest, 
const drvSerialRequest *pSrc)
{
	pDest->pCB = pSrc->pCB;
	pDest->pAppPrivate = pSrc->pAppPrivate;
	pDest->bufCount = pSrc->bufCount;
	memcpy (pDest->buf, pSrc->buf, pSrc->bufCount);
}

/*
 * drvSerialCopyResponse()
 *
 * Copy a source response into a destination response 
 * (dont copy unused bytes)
 */
LOCAL void drvSerialCopyResponse(
drvSerialResponse *pDest, 
const drvSerialResponse *pSrc)
{
	pDest->pAppPrivate = pSrc->pAppPrivate;
	pDest->bufCount = pSrc->bufCount;
	memcpy (pDest->buf, pSrc->buf, pSrc->bufCount);
}

/*
 * drvSerialInit()
 */
LOCAL long drvSerialInit (void)
{
	long            status;
	int             opt;

	/*
	 * dont init twice
	 */
	if (devNameTbl.lock) {
		return S_drvSerial_OK;
	}

	/*
	 * create a hash table for the file 
	 * name strings and associated MUTEX
	 */
	opt = SEM_Q_PRIORITY | SEM_DELETE_SAFE |
		SEM_INVERSION_SAFE;
	devNameTbl.lock = semMCreate (opt);
	if (!devNameTbl.lock)
	{
		status = S_dev_noMemory;
		errMessage(status,
			   ":drvSerialInit() semMCreate ()");
		return status;
	}

	devNameTbl.pBucket = bucketCreate(256);
	if (!devNameTbl.pBucket)
	{
		status = S_dev_noMemory;
		errMessage(status,
			   ":drvSerialInit() bucketCreate()");
		semDelete(devNameTbl.lock);
		return status;
	}

	return S_drvSerial_OK;
}

/*
 * drvSerialReport()
 */
LOCAL long
drvSerialReport(int level)
{
	drvSerialParm  		*pDev;
	int             	status;
	drvSerialPriority	pri;

	if (devNameTbl.pBucket)
	{
		status = semTake (devNameTbl.lock, WAIT_FOREVER);
		assert (status == OK);

		pDev = (drvSerialParm *) ellFirst(&devNameTbl.list);
		while (pDev)
		{
			printf("\tDevice Name =%s\n", pDev->pName);
			if (level > 0)
			{
				printf("\t\tRequest Queue\n");
				for (pri = dspLowest; pri <= dspHighest; pri++)
				{
					printf(
					"\t\t\tPri=%d Pending=%d Reserved=%d\n",
					       pri,
			 ellCount(&pDev->requestQueues[pri-dspLowest]),
			 ellCount(&pDev->reserveQueues[pri-dspLowest])
			 );
				}
				printf("\t\tResponse Q cnt=%d\n",
					ellCount(&pDev->respQueue));
			}
			if (level > 3) {
				printf("\t\tmutexSem ");
				semShow(pDev->mutexSem, level);
				printf("\t\twriteQueueSem");
				semShow(pDev->writeQueueSem, level);
				printf("\t\treadQueueSem");
				semShow(pDev->readQueueSem, level);
			}
			pDev = (drvSerialParm *) ellNext(&pDev->node);
		}
		if (level > 2)
		{
			bucketShow(devNameTbl.pBucket);
		}

		status = semGive (devNameTbl.lock);
		assert (status == OK);
	}

	return S_drvSerial_OK;
}

/*
 * drvSerialAttachLink()
 */
long
drvSerialAttachLink(
		    const char *pName,
		    drvSerialParseInput *pParser,
		    void **ppAppPrivate
)
{
	drvSerialParm  *pDev;

	if (!pParser) {
		return S_drvSerial_noParser;
	}

	/*
	 * lazy init
	 */
	if (!devNameTbl.lock) {
		long status;
		status = drvSerialInit ();
		if (status) {
			return status;
		}
	}

	pDev = drvSerialTestExist(pName);
	if (pDev) {
		/*
		 * check for in use by another app
		 */
		if (pDev->pInputParser != pParser) {
			return S_drvSerial_linkInUse;
		}
		*ppAppPrivate = pDev->pAppPrivate;
		return S_drvSerial_OK;
	}
	else {
		return S_drvSerial_noneAttached;
	}
}

/*
 * drvSerialTestExist()
 */
LOCAL drvSerialParm *drvSerialTestExist(const char *pName)
{
	int	status;
	drvSerialParm  *pDev;

	/*
	 * no init chk 
	 */
	if (!devNameTbl.pBucket)
	{
		long epicsStatus;
		epicsStatus = drvSerialInit ();
		if (epicsStatus) {
			return NULL;
		}
	}

	/*
	 * MUTEX around use of hash table 
	 */
	status = semTake (devNameTbl.lock, WAIT_FOREVER);
	assert (status == OK);

	pDev = (drvSerialParm *) bucketLookupItemStringId(
					  devNameTbl.pBucket, pName);
	/*
	 * MUTEX off around use of hash table 
	 */
	status = semGive (devNameTbl.lock);
	assert (status == OK);

	return pDev;
}

/*
 * drvSerialCreateLink()
 */
long
drvSerialCreateLink(
		    const char *pName,
		    drvSerialParseInput *pParser,
		    void *pAppPrivate,
		    drvSerialLinkId * pId
)
{
	drvSerialParm  		*pDev;
	long            	status;
	drvSerialPriority	pri;

	if (!pParser) {
		return S_drvSerial_noParser;
	}

	/*
	 * verify a hash table for the file name strings and associated MUTEX
	 * was initialized in drvSerialInit()
	 */
	if (!devNameTbl.pBucket)
	{
		long epicsStatus;
		epicsStatus = drvSerialInit ();
		if (epicsStatus) {
			return epicsStatus;
		}
	}

	pDev = drvSerialTestExist (pName);

	if (pDev)
	{
		return S_drvSerial_linkInUse;
	}

	pDev = (drvSerialParm *) calloc (1, sizeof(*pDev));
	if (!pDev)
	{
		status = S_dev_noMemory;
		errMessage(status, ":drvSerialCreateLink() calloc()");
		return status;
	}

	/*
	 * create free list for messages
	 * (preallocate all of them)
	 */
	freeListInitPvt (&pDev->pFreeListPVT, sizeof(freeListItem), 
				requestQueueQuota+responseQueueQuota);

	pDev->pInputParser = pParser;
	pDev->pAppPrivate = pAppPrivate;
	pDev->readCanceled = FALSE;
	pDev->writeCanceled = FALSE;

	/*
	 * MUTEX around use of hash table 
	 */
	status = semTake (devNameTbl.lock, WAIT_FOREVER);
	assert (status == OK);

	/*
	 * Add entry for this file into the hash table
	 */
	assert (strlen(pName) < sizeof(pDev->pName) - 1);
	strcpy(pDev->pName, pName);
	status = bucketAddItemStringId(
				       devNameTbl.pBucket,
				       pDev->pName,
				       pDev);
	if (status)
	{
		status = S_dev_noMemory;
		errMessage(status, "bucketAddItemStringId()");
		free(pDev);
		status = semGive (devNameTbl.lock);
		assert (status == OK);
		return status;
	}

	/*
	 * MUTEX off around use of hash table 
	 */
	status = semGive (devNameTbl.lock);
	assert (status == OK);

	pDev->readQueueSem = semBCreate(SEM_Q_PRIORITY, SEM_EMPTY);
	if (pDev->readQueueSem == NULL)
	{
		bucketRemoveItemStringId(devNameTbl.pBucket, pDev->pName);
		free(pDev);
		status = S_dev_noMemory;
		errMessage(status,
			   ":drvSerialCreateLink() semBCreate()");
		return status;
	}
	pDev->writeQueueSem = semBCreate(SEM_Q_PRIORITY, SEM_EMPTY);
	if (pDev->writeQueueSem == NULL)
	{
		semDelete(pDev->readQueueSem);
		bucketRemoveItemStringId(devNameTbl.pBucket, pDev->pName);
		free(pDev);
		status = S_dev_noMemory;
		errMessage(status,
			   ":drvSerialCreateLink() semBCreate()");
		return status;
	}
	pDev->mutexSem = semMCreate (SEM_Q_PRIORITY|
				SEM_DELETE_SAFE|SEM_INVERSION_SAFE);
	if (pDev->mutexSem == NULL)
	{
		semDelete(pDev->readQueueSem);
		semDelete(pDev->writeQueueSem);
		bucketRemoveItemStringId(devNameTbl.pBucket, pDev->pName);
		free(pDev);
		status = S_dev_noMemory;
		errMessage(status,
			   ":drvSerialCreateLink() semMCreate()");
		return status;
	}

	for (pri = dspLowest; pri <= dspHighest; pri++)
	{
		unsigned index;

		index = pri - dspLowest;
		assert (index < NELEMENTS(pDev->requestQueues));
		ellInit(&pDev->requestQueues[index]);
		ellInit(&pDev->reserveQueues[index]);
	}
	pDev->pHighestPriReqQue = NULL; /* no req queue populated */

	ellInit (&pDev->respQueue);
	ellInit (&pDev->limboQueue);

	/*
	 * MUTEX around use of hash table 
	 */
	status = semTake (devNameTbl.lock, WAIT_FOREVER);
	assert (status == OK);

	ellAdd (&devNameTbl.list, &pDev->node);

	/*
	 * MUTEX off around use of hash table 
	 */
	status = semGive (devNameTbl.lock);
	assert (status == OK);

	status = drvSerialLinkOpen (pDev);
	if (status) {
		semDelete(pDev->readQueueSem);
		semDelete(pDev->writeQueueSem);
		bucketRemoveItemStringId(devNameTbl.pBucket, pDev->pName);
		free(pDev);
		return status;
	}

	/*
	 * set their handle to this serial link
	 */
	*pId = (void *) pDev;

	return S_drvSerial_OK;
}

/*
 * drvSerialWrite()
 * (this is a task entry point)
 */
int drvSerialWrite (drvSerialParm * pDev)
{
	int status;

	while (TRUE)
	{
		status = semTake (pDev->writeQueueSem, WAIT_FOREVER);
		assert (status == OK);

		while (!pDev->pWF) {
			pDev->pWF = fopen (pDev->pName, "w");
			if (pDev->pWF) {
				pDev->writeCanceled = FALSE;
				break;
			}
			WAIT_N_SEC (10);
		}

		status = sendAllRequests (pDev);
		if (status<0) {
			drvSerialLinkReset (pDev);
			fclose (pDev->pWF);
			pDev->pWF = NULL;
			/*
			 * go ahead and reopen the file
			 */
			status = semGive (pDev->writeQueueSem);
			assert (status == OK);
		}
		else {
			/*
			 * flush out the serial driver so that high priority events
			 * are allowed to jump to the front of the queue
			 * 
			 * Under vxWorks this flushes stdio to the the write (driver)
			 * level where characters might still be accumulating. We
			 * prefer to accumulate in our buffers in this source so that
			 * high priority requests are allowed to jump to the front of
			 * the queue. However there is no standard way to do this via
			 * ioctl(). Note that under vxWorks FIOFLUSH discards the
			 * characters in tyLib.c instead of blocking the task until
			 * the characters are delivered to the link as I would
			 * expect
			 */
			fflush (pDev->pWF);
		}
	}
}

/*
 * sendAllRequests()
 */
LOCAL int sendAllRequests (drvSerialParm *pDev)
{
	freeListItem *pReq;
	int status;

	status = 0; 
	while (TRUE) {
		pReq = fetchHighestPriorityRequest(pDev);
		if (!pReq) {
			break;
		}

		status = (*pReq->shr.req.pCB) (pDev->pWF, &pReq->shr.req);

		drvSerialDisposeFreeItem(pDev, pReq);

		if (status < 0) {
			break;
		}
	}

	return status;
}

/*
 * fetchHighestPriorityRequest()
 *
 * Fetch a request from the highest priority populated queue.
 * Return NULL if there are currently no requests in the system.
 */
LOCAL freeListItem *fetchHighestPriorityRequest(drvSerialParm *pDev)
{
	freeListItem *pReq = NULL;
	int semStatus;

	semStatus = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (semStatus == OK);

	while (pDev->pHighestPriReqQue>=pDev->requestQueues) {
		pReq = (freeListItem *) ellGet(pDev->pHighestPriReqQue);
		if (pReq) {
			break;
		}
		pDev->pHighestPriReqQue--;
	}

	if (pReq) {
		assert (pReq->queue == dsReq);
		pReq->queue = dsLimbo;
		ellAdd(&pDev->limboQueue, &pReq->node);
	}

	semStatus = semGive (pDev->mutexSem);
	assert (semStatus == OK);

	return pReq;
}

/*
 * drvSerialRead()
 * (this is a task entry point)
 */
int
drvSerialRead (drvSerialParm * pDev)
{
	long            status;
	freeListItem 	*pResp;
	freeListItem	resp;

	while (TRUE)
	{

		while (!pDev->pRF) {
			pDev->pRF = fopen (pDev->pName, "r");
			if (pDev->pRF) {
				pDev->readCanceled = FALSE;
				break;
			}
			WAIT_N_SEC(10);
		}

		/*
		 * call the applications parser to fill in the response
		 */
		resp.shr.res.bufCount = 0;
		status = (*pDev->pInputParser)(pDev->pRF, &resp.shr.res, 
					pDev->pAppPrivate);
		if (status < 0) {
			drvSerialLinkReset (pDev);
			fclose (pDev->pRF);
			pDev->pRF = NULL;
			continue;
		}
		else if (resp.shr.res.bufCount==0) {
			continue;
		}

		/*
		 * Dont continue until this response queue is
		 * below its maximum size
		 *
		 * (app notifies here if an entry is removed 
		 * from the response queue).
		 */
		while (ellCount(&pDev->respQueue)>= responseQueueQuota) {
			semTake (pDev->readQueueSem, 4*TICKS_PER_SEC);;
		}

		/*
		 * obtain a free entry
		 */
		while ( !(pResp = drvSerialFetchFreeItem (pDev)) ) {
			WAIT_N_SEC(1);
		}

		/*
		 * copy the response
		 */
		drvSerialCopyResponse (&pResp->shr.res, &resp.shr.res);

		/*
		 * MUTEX on
		 */
		status = semTake (pDev->mutexSem, WAIT_FOREVER);
		assert (status == OK);

		/*
		 * add to the response queue
		 */
		assert (pResp->queue == dsLimbo);
		ellDelete (&pDev->limboQueue, &pResp->node);
		pResp->queue = dsRes;
		ellAdd (&pDev->respQueue, &pResp->node);

		/*
		 * MUTEX off
		 */
		status = semGive (pDev->mutexSem);
		assert (status == OK);
	}
}

/*
 * test to see if the input queue is full
 */
int
drvSerialInputQueueIsFull (drvSerialLinkId id)
{
	drvSerialParm *pDev = (drvSerialParm *) id;

	if (ellCount(&pDev->respQueue)>= responseQueueQuota) {
		return TRUE;
	}
	/*
	 * no need to check to see if there is sufficent
	 * memory because I preallocate all of items in
	 * the queue quota
	 */
	return FALSE;
}


/*
 * Pull the next response off the response queue
 * (return error if none are present)
 */
long
drvSerialNextResponse(
		      drvSerialLinkId id,
		      drvSerialResponse * pResponse)
{
	drvSerialParm *pDev = id;
	freeListItem *pResp;
	long status;

	/*
	 * MUTEX on
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	/*
	 * inform the read task that something was removed 
	 * from the response queue when it was full
	 * (in case it needs to add another item)
	 */
	if (ellCount(&pDev->respQueue)>=responseQueueQuota) {
		status = semGive (pDev->readQueueSem);
		assert (status == OK);
	}

	/*
	 * obtain an event entry
	 */
	pResp = (freeListItem *) ellGet(&pDev->respQueue);

	if (pResp) {
		assert (pResp->queue == dsRes);
		drvSerialCopyResponse(pResponse, &pResp->shr.res);

		pResp->queue = dsLimbo;
		ellAdd (&pDev->limboQueue, &pResp->node);
		drvSerialDisposeFreeItem (pDev, pResp);
	}

	/*
	 * MUTEX off
	 */
	status = semGive (pDev->mutexSem);
	assert (status == OK);

	if (!pResp)
	{
		return S_drvSerial_noEntry;
	}

	return S_drvSerial_OK;
}


/*
 * drvSerialFetchFreeItem()
 *
 * Obtain a new event block - look on the free list first then
 * look in system pool.
 */
LOCAL freeListItem * drvSerialFetchFreeItem (drvSerialParm *pDev)
{
	int status;
	freeListItem *pItem;

	/*
	 * MUTEX on
	 * (task delete safe mutex prevents loss of limbo items)
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	pItem = (freeListItem *) freeListCalloc (pDev->pFreeListPVT);

	/*
	 * so we dont loose it if the task is deleted
	 */
	if (pItem) {
		pItem->queue = dsLimbo;
		ellAdd(&pDev->limboQueue, &pItem->node);
	}

	status = semGive (pDev->mutexSem);
	assert (status == OK);

	return pItem;
}

/*
 * drvSerialDisposeFreeItem()
 *
 * Place excess event on the free list and perhaps someday
 * notify tasks that are waiting for a free event
 * block
 */
LOCAL void
drvSerialDisposeFreeItem (drvSerialParm *pDev, freeListItem * pItem)
{
	int             status;

	/*
	 * MUTEX on
	 * (task delete safe mutex prevents loss of limbo items)
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	assert (pItem->queue==dsLimbo);
	ellDelete(&pDev->limboQueue, &pItem->node);

	freeListFree (pDev->pFreeListPVT, pItem);

	status = semGive (pDev->mutexSem);
	assert (status == OK);
}

/*
 * Place request in the request queue
 */
long
drvSerialSendRequest(
		     drvSerialLinkId id,
		     drvSerialPriority pri,
		     const drvSerialRequest * pReq)
{
	drvSerialParm *pDev = (drvSerialParm *) id;
	freeListItem *pItem;
	ELLLIST *pReqList;
	ELLLIST *pResList;
	long status;

	/*
	 * check for application programmer error
	 */
	if (pReq->bufCount >= sizeof(pReq->buf)) {
		return S_drvSerial_invalidArg;
	}
	if (pri > dspHighest) {
		return S_drvSerial_invalidArg;
	}
	if (pReq->pCB==NULL) {
		return S_drvSerial_invalidArg;
	}

	/*
	 * add the request to the queue with MUTEX
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	/*
	 * if the request queue is full then return an error (instead of
	 * blocking so the record can enter alarm state)
	 */
	pReqList = &pDev->requestQueues[pri];
	pResList = &pDev->reserveQueues[pri];
	if (ellCount(pReqList) + ellCount(pResList) >= requestQueueQuota)
	{
		status = semGive (pDev->mutexSem);
		assert (status == OK);
		return S_drvSerial_queueFull;
	}

	/*
	 * obtain an event entry
	 */
	pItem = drvSerialFetchFreeItem(pDev);
	if (!pItem)
	{
		status = semGive (pDev->mutexSem);
		assert (status == OK);
		return S_dev_noMemory;
	}

	/*
	 * copy in their request
	 */
	drvSerialCopyRequest(&pItem->shr.req, pReq);

	assert (pItem->queue==dsLimbo);
	ellDelete (&pDev->limboQueue, &pItem->node);

	/*
	 * keep track of the highest priority
	 * and populated request queue 
	 */
	if (pReqList>pDev->pHighestPriReqQue) {
		pDev->pHighestPriReqQue = pReqList;
	}
	pItem->queue = dsReq;
	pItem->pri = pri;
	ellAdd(pReqList, &pItem->node);

	status = semGive (pDev->mutexSem);
	assert (status == OK);

	/*
	 * inform write task that there is a new entry
	 */
	status = semGive (pDev->writeQueueSem);
	assert (status == OK);

	return S_drvSerial_OK;
}

/*
 * drvSerialCreateRequest ()
 */
drvSerialRequest *
drvSerialCreateReservedRequest(
				drvSerialLinkId id,
				drvSerialPriority pri)
{
	drvSerialParm *pDev = (drvSerialParm *) id;
	freeListItem *pItem;
	ELLLIST *pReqList;
	ELLLIST *pResvList;
	long status;
	
	if (pri > dspHighest) {
		return NULL;
	}
	
	/*
	 * add the request to the queue with MUTEX
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	/*
	 * if the request queue is full then return an error (instead of
	 * blocking so the record can enter alarm state)
	 */
	pReqList = &pDev->requestQueues[pri];
	pResvList = &pDev->reserveQueues[pri];
	if (ellCount(pReqList) + ellCount(pResvList) >= requestQueueQuota)
	{
		status = semGive (pDev->mutexSem);
		assert (status == OK);
		return NULL;
	}

	/*
	 * obtain an event entry
	 */
	pItem = drvSerialFetchFreeItem(pDev);
	if (!pItem)
	{
		status = semGive (pDev->mutexSem);
		assert (status == OK);
		return NULL;
	}

	assert (pItem->queue==dsLimbo);
	ellDelete (&pDev->limboQueue, &pItem->node);

	pItem->queue = dsResv;
	pItem->pri = pri;
	ellAdd(pResvList, &pItem->node);

	status = semGive (pDev->mutexSem);
	assert (status == OK);

	return &pItem->shr.req;
}

/*
 * drvSerialSendReservedRequest ()
 */
long
drvSerialSendReservedRequest(
				drvSerialLinkId id,
				const drvSerialRequest * pRequest)
{
	drvSerialParm *pDev = (drvSerialParm *) id;
	char *pChar = (char *) pRequest;
	freeListItem *pItem = (freeListItem *) (pChar - offsetof(freeListItem,shr));
	ELLLIST *pReqList;
	ELLLIST *pResvList;
	int status;

	/*
	 * add the request to the queue with MUTEX
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	/*
	 * verify that this was created with
	 * drvSerialCreateRequest()
	 */
	if (pItem->queue != dsResv || pItem->pri > dspHighest) {
		status = semGive (pDev->mutexSem);
		assert (status == OK);
		return S_drvSerial_invalidArg;
	}

	pReqList = &pDev->requestQueues[(unsigned) pItem->pri];
	pResvList = &pDev->reserveQueues[(unsigned) pItem->pri];

	ellDelete (pResvList, &pItem->node);

	/*
	 * keep track of the highest priority
	 * and populated request queue 
	 */
	if (pReqList>pDev->pHighestPriReqQue) {
		pDev->pHighestPriReqQue = pReqList;
	}
	pItem->queue = dsReq;
	ellAdd(pReqList, &pItem->node);

	status = semGive (pDev->mutexSem);
	assert (status == OK);

	/*
	 * inform write task that there is a new entry
	 */
	status = semGive (pDev->writeQueueSem);
	assert (status == OK);

	return S_drvSerial_OK;
}

/*
 * drvSerialLinkOpen ()
 *
 * shut down an existing link
 */
LOCAL int 
drvSerialLinkOpen (drvSerialParm *pDev)
{
	/*
	 * we dont quit if we are unable to open the
	 * file 
	 *
	 * instead we go ahead and spawn the tasks
	 * and keep trying there in case the link comes
	 * up later
	 */
	pDev->pWF = fopen (pDev->pName, "w");
	if (!pDev->pWF) {
		errMessage(S_drvSerial_linkDown, strerror(errno));
	}

	pDev->pRF = fopen (pDev->pName, "r");
	if (!pDev->pRF) {
		errMessage (S_drvSerial_linkDown, strerror(errno));
	}

	pDev->wtTaskId = taskSpawn(
				   "SerialWT",	/* task name */
				   tp_drvSerialPriority,/* priority */
				   tp_drvSerialOptions,	/* options */
				   tp_drvSerialStackSize,/* stack size */
				   drvSerialWrite,	/* task entry point */
				   (int) pDev,		/* task args (1-10) */
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0);
	if (!pDev->wtTaskId)
	{
		fclose (pDev->pRF);
		pDev->pRF = NULL;
		fclose (pDev->pWF);
		pDev->pWF = NULL;
		return S_dev_noMemory;
	}

	pDev->rdTaskId = taskSpawn(
				   "SerialRD",	/* task name */
				   tp_drvSerialPriority,/* priority */
				   tp_drvSerialOptions,	/* options */
				   tp_drvSerialStackSize,/* stack size */
				   drvSerialRead,	/* task entry point */
				   (int) pDev,	/* task args (1-10) */
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0);
	if (!pDev->rdTaskId)
	{
		taskDelete (pDev->wtTaskId);
		fclose (pDev->pRF);
		pDev->pRF = NULL;
		fclose (pDev->pWF);
		pDev->pWF = NULL;
		return S_dev_noMemory;
	}

	return S_drvSerial_OK;
}

/*
 * drvSerialLinkReset ()
 *
 * shut down an existing link
 */
LOCAL void drvSerialLinkReset (drvSerialParm * pDev)
{
	freeListItem 		*pItem;
	int             	status;
	drvSerialPriority	pri;

	/*
	 * MUTEX on
	 */
	status = semTake (pDev->mutexSem, WAIT_FOREVER);
	assert (status == OK);

	/*
	 * this emptys any characters in the buffers
	 * and cancels any outstanding IO operations
	 *
	 * testing the read/write canceled flags here
	 * prevents feedback (race) situations
	 */
	if (!pDev->readCanceled && !pDev->writeCanceled) {
		epicsPrintf ("%s.%d reseting link \"%s\"\n", 
			__FILE__, __LINE__, pDev->pName);
		if (pDev->pRF) {
			ioctl (fileno(pDev->pRF), FIOFLUSH, 0);
			ioctl (fileno(pDev->pRF), FIOCANCEL, 0);
			pDev->readCanceled = TRUE;
		}
		if (pDev->pWF) {
			ioctl (fileno(pDev->pWF), FIOFLUSH, 0);
			ioctl (fileno(pDev->pWF), FIOCANCEL, 0);
			pDev->writeCanceled = TRUE;
		}
	}

	/*
	 * drain outstanding requests
	 */
	for (pri=dspLowest; pri<=dspHighest; pri++) 
	{
		unsigned index;

		index = pri-dspLowest;
		while ( (pItem = (freeListItem *) ellGet(&pDev->requestQueues[index])) ) {
			pItem->queue = dsLimbo;
			ellAdd (&pDev->limboQueue, &pItem->node);
			drvSerialDisposeFreeItem (pDev, pItem);
		}
	}

	/*
	 * drain outstanding responses
	 */
	while ( (pItem = (freeListItem *) ellGet(&pDev->respQueue)) ) {
		pItem->queue = dsLimbo;
		ellAdd (&pDev->limboQueue, &pItem->node);
		drvSerialDisposeFreeItem (pDev, pItem);
	}

	/*
	 * MUTEX off
	 */
	status = semGive (pDev->mutexSem);
	assert (status == OK);

	/*
	 * dont race
	 */
	WAIT_N_SEC (1);
}

/*
 * conveinence routine which sets the baud rate from the vxWorks shell
 * (called before iocInit)
 */
int drvSerialSetBaudRate (const char *pName, unsigned rate)
{
	int fd;
	int status;

	fd = open (pName, O_RDWR, 0);
	if (fd<0) {
		return fd;
	}
/*
	status = ioctl (fd, SIO_BAUD_SET, (int) rate);
*/
	status = ioctl (fd, FIOBAUDRATE, (int) rate);
	close (fd);

	return status;
}

/*
 * conveinence routine which sets the baud rate from the vxWorks shell
 * (called before iocInit)
 */
int drvSerialGetBaudRate (const char *pName)
{
	int fd;
	int status;
	int rate;

	fd = open (pName, O_RDWR, 0);
	if (fd<0) {
		return fd;
	}
/*
	status = ioctl (fd, SIO_BAUD_GET, (int) &rate);
*/
	status = -1;
	
	close (fd);

	if (status==0) {
		printf("baud rate = %i\n", rate);
	}

	return status;
}

/*
 * Return a file pointer - allows app code to manipulate ioctl.
 */
FILE *drvSerialGetFile (drvSerialLinkId id, long direction)    
{
    drvSerialParm *pDev = id;
    
    if ( direction == WRITE )
        return pDev->pWF;
    else if ( direction == READ )
        return pDev->pRF;
    else
        return NULL;
}



