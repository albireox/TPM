<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<FONT FACE="Comic Sans MS,Arial, Helvetica">
<BLOCKQUOTE>
<H1><A NAME=Main>RawValueI Class</A></H1>

<BR>
Lightweight wrapper class for a raw Type (dbr_time_xxx).
All methods are static, they reqire the value ptr and a context hint of type/count.
<BR>
This class doesn't hold the actual memory location of the value,
since it might be owned by e.g. the CA client library,
it also doesn't know about it's Type.
<A HREF="ValueI.htm#Main">ValueI</A> provides this for a single RawValue,
the archive engine maintains circular buffers of several
RawValues.
<H2>Interface</H2>
<UL>
<LI>
Defined for future portability.
All values hold status, severity, time.
dbr_time_double has RISC pads
but it's used here because it's most common (my opinion)
<PRE>
typedef dbr_time_double	Type;
</PRE>
<LI>
Allocate/free space for num samples of type/count.
<PRE>
static Type * allocate (DbrType type, DbrCount count, size_t num);
static void free (Type *value);
</PRE>
<LI>
Calculate size of a single value of type/count
<PRE>
static size_t getSize (DbrType type, DbrCount count);
</PRE>
<LI>
Compare the value part of two RawValues, not the time stamp or status!
(for full comparison, use memcmp over size given by getSize()).
<BR>
Both lhs, rhs must have the same type.
<PRE>
static bool hasSameValue (DbrType type, DbrCount count, size_t size, const Type *lhs, const Type *rhs);
</PRE>
<LI>
Only valid for Values of same type:
<PRE>
static void copy (DbrType type, DbrCount count, Type *lhs, const Type *rhs);
</PRE>
<LI>
Access to status...
<PRE>
static short getStat (const Type *value);
static short getSevr (const Type *value);
static void getStatus (const Type *value, stdString &status);
static void setStatus (Type *value, short status, short severity);
</PRE>
<LI>
and time
<PRE>
static const osiTime getTime (const Type *value);
static void setTime (Type *value, const osiTime &stamp);
static void getTime (const Type *value, stdString &time);
private:
friend class ValueI;
static Type * allocate (size_t size);
};
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</FONT>
</P>
</BODY>
