<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<FONT FACE="Comic Sans MS,Arial, Helvetica">
<BLOCKQUOTE>
<H1><A NAME=Main>InfoFilterValueIteratorI Class</A></H1>

A <A HREF="InfoFilterValueIteratorI.htm#Main">InfoFilterValueIteratorI</A> removes all "info" values
like "Archiver Off" or "Disconnected"
from the stream.
<BR>
If nothing else this is a short example
on how to implement filtering iterators
line <A HREF="ExpandingValueIteratorI.htm#Main">ExpandingValueIteratorI</A>
or <A HREF="LinInterpolValueIteratorI.htm#Main">LinInterpolValueIteratorI</A>.
<H2>Interface</H2>
<UL>
<LI>
Create a ValueIteratorI based
on another <A HREF="ValueIterator.htm#Main">ValueIterator</A>: 
<PRE>
InfoFilterValueIteratorI (ValueIterator &base)
{	_base = base.getI(); LOG_ASSERT (base != 0); }
</PRE>
<LI>
These are passed on to the base class
<PRE>
bool isValid () const
{	return _base->isValid (); }
const ValueI * getValue () const
{	return _base->getValue (); }
double getPeriod () const
{	return _base->getPeriod ();	}
size_t determineChunk (const osiTime &until)
{	return _base->determineChunk (until); }
</PRE>
<LI>
Next/prev continue until all "Info" values
are skipped
<PRE>
bool next ()
{
	do
	{
		if (! _base->next())
			return false;
	}
	while ((*_base)->isInfo());
	return true;
}
bool prev ()
{
	do
	{
		if (! _base->prev())
			return false;
	}
	while ((*_base)->isInfo());
	return true;
}
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</FONT>
</P>
</BODY>
