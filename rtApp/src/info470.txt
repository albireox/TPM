











				  Acromag, Inc.
				30765 Wixom Road
				  P.O. Box 437
			   Wixom, Michigan 48393-7037

			      Phone: (810)624-1541
			       FAX: (810)624-9234

				 Library Software
		   Information File for the IP470/IP440 Boards
				    Version A
				     01/04/96


	     The  information  in this manual is subject to  change
	     without notice.   Acromag, Inc.,  makes no warranty of
	     any kind with regard to this material and accompanying
	     software,  including, but not limited to,  the implied
	     warranties  of  merchantability  and  fitness  for   a
	     particular   purpose.    Acromag,	 Inc.,  assumes  no
	     responsibility for any errors that may appear in  this
	     manual and accompanying software.


	     Copyright 1996, Acromag, Inc.


	     OS-9/68000  is  a registered  trademark  of  Microware
	     Systems Corporation.




























	1. Overview

	This  "information"  file  contains a description of  the library
	programs used for the following models of Acromag Industrial  I/O
	Boards:

	     IP470 Digital I/O Board
	     IP440 Isolated Digital Input Board (32 isolated inputs only)
		   same functionality  as IP470 inputs and uses the IP470
		   "C" library.

	2. Introduction

	The  software  for  the  IP470/IP440  board  is   implemented  as
	a library of "C" functions.    This  will  make  it  possible  to
	utilize the  board  by simply  linking  the user's  code with the
	provided   library   and   making   function   calls   for   each
	"command"  to be accomplished.  Most of the function  calls  will
	require  a few parameters or the address of a parameter block  to
	be  passed.   The  parameters will  include  the  board  address,
	configuration  information,  data storage addresses,  and  status
	information. These functions accomplish the following tasks:

	     - Configuration
	     - Read Status and ID
	     - Read Input
	     - Write Output
	     - Change of State and Level Interrupts

	Also  included  is  a demonstration program which shows  how  the
	library routines are used.  It is also a helpful program  to  use
	when first installing the board, checking  it  out, and  learning
	how it works.


	3. List of Files

	The library  software  for  each  Acromag  I/O  board  is  in	a
	correspondingly named subdirectory on the supplied diskette.  The
	files  which  make up the library for the  IP470/IP440  board are
	stored in the subdirectory named "IP470".

	There  are two types of program files provided.   Library program
	files are the files which make up the "library".  Support program
	files contain example  programs which show how to use the library
	programs.

	Part   of   the  support  files  are  in  a  subdirectory   named
	"EXCEPTION".   This directory contains general purpose  interrupt
	support routines used  by the  IP470/IP440  board library and the
	demonstration  program.   A  separate  information  file  in  the
	"EXCEPTION"  subdirectory explains how to use these routines  and
	the demonstration program provides an example of their use.






				   1








	3.1 Library Program Files

	The  following  files are included on the supplied  diskette  and
	make up the actual "library" software.

	     ip470.h   - include file.
	     cnfg470.c - configure.
	     rsts470.c - read status and ID.
	     rpnt470.c - read an input point.
	     rprt470.c - read an input port.
	     wpnt470.c - write an output point.
	     wprt470.c - write an output port.
	     carrier.c - interrupt handlers for change of state and level
			 interrupts. Configures Acromag carrier board.


	3.2 Support Program Files

	The  following files are included on the supplied diskette.   The
	test program demonstrates how  the library  programs may be used.

	     drvr470.c - test program to  demonstrate  library  programs.
	     makefile  - "makefile" for the library and support programs.

	     drvr470.gen - generic version of test program to demonstrate
			   library programs.
	     makefile.gen - generic "makefile" for the library and support
			    programs.

	     Files in the subdirectory "EXCEPTION" also provide  support.


	4. Software Installation

	It  is strongly advised that the user make a backup copy  of  the
	distribution diskettes and that the original diskettes be  stored
	in a safe place.

	The  software is installed by simply copying the library files to
	the  user's  work directory and compiling and  linking  with  the
	user's application program.   The "makefile" provided can be used
	as  an  example of how to integrate the library with  the  user's
	application program.

	The generic version is generated by renaming files "makefile.gen"
	and "drvr470.gen" to "makefile" and "drvr470.c".    The  makefile
	is then  used  to  compile  the  generic  demonstration  program.
	Items 6 and 7 from the main demonstration menu (attach and detach
	interrupt  handlers)  are  removed  from   the  generic  program,
	all other functions are the same.







				   2








	5. Hardware Installation

	For proper installation of each Acromag I/O board the user should
	refer  to  the appropriate user's manual.


	6. Usage of the Library and Support Programs

	It  is recommended that the user read the  User's Manual for  the
	board to become familiar with the  hardware.   To use the example
	and library programs the user must  compile and link the supplied
	files.  First execute "make" in the  EXCEPTION	 subdirectory  to
	compile the exception handler support  routines   needed  by  the
	demonstration program.	   Next,  in  the  IP470    subdirectory,
	execute "make" which will compile the demonstration  program  and
	create  the executable  program  "run470" in the executable files
	directory.

	The program is invoked by typing:

	     run470

	This example  program  is  menu driven and helps the user  become
	familiar with the library software.

	The following menu is displayed:

	     IP470 Library Demonstration Version A

	     1. Exit this Program
	     2. Set IP Module Base Address
	     3. Set Up Configuration Parameters
	     4. Configure Board Command
	     5. Read Status Command and ID
	     6. Attach Exception Handler
	     7. Detach Exception Handler
	     8. Read Input Point
	     9. Read Input Port
	    10. Write Output Point
	    11. Write Output Port

	    Select:


	To  perform  digital  I/O,  follow   this sequence of  main  menu
	selections:

	     Select 2: To set the IP Module base address.
	     Select 5: To read the board's status and ID.
	     Select 8 or 9: To read input.
	     Select 10 or 11: To write output






				   3







	To use  the example  interrupt  routines  provided,  follow  this
	sequence of main menu selections:

	     Select 2: To set the IP module base address.
	     Select 6: To attach an interrupt exception handler.   Select
		       Change of state or Level Interrupts.
	     Select 3: To set up Configuration through the  Configuration
		       Parameter  Menu.   This  Menu  will allow the user
		       to set the board up for interrupts.
		       Following are typical values for the Configuration
		       parameters when using the example routines:

			    Configuration Parameters

			    Board Pointer:	ffff0500 (use your own)
			    Parameter Mask:	  FF
			    Enhanced Mode Flag:   01
			    Write Mask: 	  00
			    Event Control:	  00  00
			    Debounce Clock:	  01
			    Debounce Control:	  00
			    Debounce Duration:	  00  00
			    Reset/Int. Enable:	  03
			    Interrupt Vector:	  b0

	     Select 4: To  configure  the board using the information  in
		       the Configuration Block.
	     Select 5: To read the board's status information.
	     Select 8, or 9: To read port data.
	     Select 10, or 11: To write port data.

	The interrupt service  routine  writes  the  interrupting channel
	number  and state to variables 'last_chan' and 'last_state' as an
	indication that the interrupt has been serviced.    To  view  the
	last  interrupting  channel  number  and  state  select the "Read
	Status" command from the main demonstration menu.

	If the interrupt vector  or  the  interrupt  type is changed the
	the user must detach the old exception handler before  attaching
	the new exception handler.


	6.1 Explanation of Main Demonstration Menu

	Following is an explanation of each menu selection:

	     1. Exit this Program

	     This  selection detaches the interrupt handlers used by  the
	     demonstration  program (if  any  are  attached)  and  causes
	     execution to be returned to the shell.







				   4







	     2. Set IP Module Base Address

	     This  selection  allows the user to set or change  the  base
	     address of the IP module being used.  The value entered here
	     will be entered in the Configuration structures.

	     3. Set Up Configuration Parameters

	     This  selection will cause the Configuration Parameter  Menu
	     to be displayed.	Through  that menu it will be possible to
	     enter  values  into the  various  structure members  of  the
	     Configuration structure.  See section 6.2 for details on the
	     Configuration Parameter Menu which follows.

	     4. Configure Board Command

	     This  menu selection will call the  cnfg470()  function  and
	     pass a pointer which points to the Configuration  structure.
	     Information in the Configuration  is  written  to the board.

	     5. Read Status & ID Command

	     This  menu  selection will call the rsts470()  function  and
	     pass a pointer which points to the Configuration  structure.
	     The  current status information is read from the  board  and
	     written into this structure by the rsts470()  function.  The
	     status information is then displayed by the example program.

	     6. Attach Exception Handler

	     This  menu selection allows the user to attach  one  of  two
	     types of interrupt  exception  handlers  for  use  with  the
	     demonstration  program.	The exception vector base used is
	     specified in the Configuration structure.

	     The  two  different   interrupt  exception   handlers  allow
	     servicing of interrupts in different ways depending upon the
	     user's need.  Following is  a synopsis  of the two types  of
	     exception handlers.  Please see  the  descriptions  in  this
	     document  of  the  interrupt  handler   routines	and   the
	     extensive comments in  the  source  code  of  the  routines.

		  Change   of  State  Method:  This  type  of	interrupt
		  servicing  is  done  when  the  user	 wants processing
		  done each time the state of  the interrupt input signal
		  changes either  from  low  to  high  or  high  to  low.
		  See the function  description  cos470() for  electrical
		  connection information.

		  Level:    This type of interrupt exception servicing is
		  done when the user wants processing done each  time the
		  input signal changes to the  programmed  state,  either
		  low to high or high to low.  An alternative would be to
		  use the Change of State Method.




				   5









	     7. Detach Exception Handler

	     This  menu  selection detaches the  demonstration  program's
	     interrupt  exception handlers from the vectors specified  in
	     the Configuration structure.

	     8. Read Input Point

	     This  command  is used to read a  single  input  point.  The
	     user enters the  port  number  (0 thru 5)  and  point number
	     (0 to 7).	  The  rpnt470()  function  is  called, then  the
	     result is displayed.

	     9. Read Input Port

	     This  command is used to read a port.   The user  enters the
	     port number (0 thru 5).   The  rprt470() function is called,
	     then the result is displayed.

	     10. Write Output Point

	     This  command is  used  to  write  a  single  output  point.
	     The user enters the port number (0 thru 5), the point number
	     (0  to 7),  and  the  value  to  write  (0 or 1),  then  the
	     wpnt470() function is called.

	     11. Write Output Port

	     This command is used to write a port of 8 points.	 The user
	     enters the port number (0 thru 5).   The user is prompted to
	     enter the value  to  write (0 to FF hex), then the wprt470()
	     function is called.



	6.2  Explanation of the Configuration Menu

	This  menu  is  displayed  when  the  user  selects  the  "Set Up
	Configuration"  menu  item  from  the  Main  Demonstration  Menu.
	Through the Configuration Parameter Menu it will be possible  for
	the  user to  enter  values  into  the  Configuration  structure.
	The Configuration structure is used  by  the  cnfg470() function.
	Following  is  the   "Set  Up  Configuration  Parameters"   menu.
	All numbers are displayed and entered in hexadecimal.












				   6







	     Configuration Parameters

	     1. Return to Previous Menu
	     2. Board Pointer:	    FFFF0500
	     3. Parameter Mask:       00
	     4. Enhanced Mode Flag:   00
	     5. Write Mask:	      00
	     6. Event Control:	      00  00
	     7. Debounce Clock:       01
	     8. Debounce Control:     00
	     9. Debounce Duration:    00  00
	    10. Reset/Int. Enable:    00
	    11. Interrupt Vector:     b0

	    Select:

	     (Note  that  the values in the menu will differ depending  on
	     your system.)

	     Following is an explanation of each menu selection:

	     1. Return to Previous Menu

	     This selection returns  the user  to the Main  Demonstration
	     Menu.

	     2. Board Pointer

	     The  board  base  address is displayed,  however,  the  base
	     address  can  only be changed through the Main Demonstration
	     Menu.   This  parameter  is  automatically   updated  in  the
	     Configuration structure when the user selects the "Set Board
	     Base Address" item in the Main Demonstration Menu.

	     3. Parameter Mask

	     This  selection  allows the user to enter a  value  for  the
	     Parameter Mask.  The Parameter Mask is used by the cnfg470()
	     function to  determine which parameters to update in various
	     registers of the board.	The individual bits correspond to
	     various parameters in the Configuration structure.    A  "1"
	     in the bit position means to use  the  respective  parameter
	     field to update a register on the board.	  A "0" means not
	     to use the parameter field.


		  bit 0  - Enhanced Mode Parameter.
		  bit 1  - Write Mask Register Parameter.
		  bit 2  - Event Control Register Parameter.
		  bit 3  - Debounce Clock Register Parameter.
		  bit 4  - Debounce Control Register Parameter.
		  bit 5  - Debounce Duration Register Parameter.
		  bit 6  - Reset/Interrupt Enable Register Parameter.
		  bit 7  - Interrupt Vector Register Parameter.




				   7







	     4. Enhanced Flag

	     This  selection  allows the user to enter a  value  for  the
	     Enhanced Flag.  A "1" in bit position 0 selects the Enhanced
	     Mode  of  operation.   A "0" in bit  position 0  causes  the
	     cnfg470() function to skip the procedure that configures the
	     device for enhanced mode.

	     5. Write Mask

	     This  selection  allows the user to enter a  value  for  the
	     Write Mask Register.    This  register  is used  to mask the
	     ability to write data to the six output ports.  A "1" in any
	     bit position  will  mask  writes to the output port.  A  "0"
	     in  any bit position will unmask (allow) writes to the port.

	     6. Event Control

	     This  selection  allows the user to  enter  values  for  the
	     Event Control Registers.  Event Control Registers select the
	     polarity of the input sense event in nibbles for each of the
	     input ports.    A  value  of  "0" in a  bit position selects
	     events on high to low transitions  for four  bits of a port.
	     A value of "1" in  a bit position selects  events on  low to
             high transitions for four bits of a port.    Note: The IP440
             board's  isolating  input  stage  inverts  the  input signal
             presented to the digital ASIC chip.   This requires that the
             event control polarities be  inverted  to  flag  transitions
             correctly.

	     7. Debounce Clock

	     This  selection  allows  the user to enter a value  for  the
	     Debounce Clock Register.	  If bit 0 of this register is 0,
	     then the debounce clock is taken from I/O47  (pin 41 of P2).
	     If bit 0 of this register is 1,  then the 8MHz IP bus  clock
	     is used (recommended).

	     8. Debounce Control

	     This  selection  allows  the user to enter a value  for  the
	     Debounce Control Register.  A value of "1" in a bit position
	     enables   debounced  operation  for  all  bits  of  a  port.
	     A value of "0" in a bit position disables the debounce logic
	     for all bits of a port.

	     9. Debounce Duration

	     This  selection  allows  the user to enter  values  for  the
	     Debounce Duration Registers.    Two  bits are used to select
	     one of four debounce values for each port.  A debounce value
	     of 00 selects 3-4us, 01 selects 48-64us, 10 selects 0.75-1ms
	     and 11 selects 6-8ms.





				   8







	     10. Reset/Interrupt Enable

	     This  selection  allows the user to enter a  value  for  the
	     Reset/Interrupt  Enable  Register.    Writing  a  "1" to bit
	     position 1 causes a  reset  of the  digital I/O  ASIC  chip.
	     Writing A "1" to bit position 0 will allow interrupts to  be
	     generated  by  the  IP470  board.	  A "0" in bit position 0
	     disables interrupts for the entire IP470 board.

	     11. Interrupt Vector

	     This  selection  allows  the user to enter a value  for  the
	     interrupt exception vector.


	7. Description of Library Programs.

	Following  are descriptions of the programs and files which  make
	up the library.

	ip470.h - This module contains  the  definitions  and  structures
	used by the library.

	cnfg470.c - This module  is used to perform the "Configure Board"
	function  for  the IP470 board.   A  pointer to the Configuration
	Block is passed to this routine.  The routine  will use a pointer
	within the Configuration Block to  reference the registers on the
	board.  Based on flag bits in the  Parameter  Mask  word  in  the
	Configuration Block, the board  will be  configured  and  various
	registers will be  updated  with  new information which  will  be
	transferred from the Configuration Block structure.

	  calling sequence:

	     cnfg470(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.


	rsts470.c  - This  module  is used to  perform  the  "Read Status
	and ID" function for the IP470 board.	A  pointer to the  Status
	Block  is  passed to this routine.  The routine  uses  a  pointer
	within  the Status Block to reference registers on the board  and
	transfers   information  from  the  board to  the  Status  Block.

	  calling sequence:

	     rsts470(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Status Block structure.




				   9







	rpnt470.c  -  This module  is used to  perform  the  "Read  Input
	Point" function for the IP470  board.	A  pointer to  the  board
	configuration structure, the port number and the point number are
	passed to this  routine.  This information is  used  to  read the
	point value from the board.

	  calling sequence:

	     status = rpnt470(c_blk,port,point);

	     where:
		  status   - (long) Returned value of the input point.
		  c_blk    - (structure  pointer)  Pointer to  the  board
			     configuration structure.
		  port	   - (byte) Target input port number.
		  point    - (byte) Target input point number.


	rprt470.c  -  This  module  is used to perform  the  "Read  Input
	Port" function for the IP470  board.   A  pointer  to  the  board
	configuration  structure  and  port number (0 or 1) are passed to
	this routine.	This  information  is used to read the input port
	data value from the  board.

	  calling sequence:

	     status = rprt470(c_blk,port);

	     where:
		  status   - (long) Returned value of the input port.
		  c_blk    - (structure  pointer)  Pointer to  the  board
			     configuration structure.
		  port	   - (byte) Target input port number.


	wpnt470.c  -  This module is used to perform  the  "Write Output
	Point" function for the IP470 board.   A pointer  to  the  board
	configuration structure,  the port number,  the point number and
	point  value  to  write  are  passed  to  this  routine.


	  calling sequence:

	     status = wpnt470(c_blk,port,point,value);

	     where:
		  status   - (long) Returned error status of the function.
		  c_blk    - (structure  pointer)  Pointer to  the  board
			     configuration structure.
		  port	   - (byte) Target input port number.
		  point    - (byte) Target input point number.
		  value    - (byte) Value to write to output point.






				   10






	wprt470.c  -  This  module is used to perform  the  "Write Output
	Port" function for the IP470  board.   A  pointer  to  the  board
	configuration structure, the port number and port  value to write
	are passed to this routine.


	  calling sequence:

	     status = wprt470(c_blk,port,value);

	     where:
		  status   - (long) Returned error status of the function.
		  c_blk    - (structure  pointer)  Pointer to  the  board
			     configuration structure.
		  port	   - (byte) Target input port number.
		  value    - (byte) Value to write to output port.


	cos470() -  This function is used to perform  the Change of State
	interrupt handling.   For change  of  state operation  input bits
	0 & 4, 1 & 5, 2 & 6, and 3 & 7 of  each  port  must  be connected
	together  with  a  wire  jumper  at  the termination panel.   The
	interrupt polarity of input bits 0, 1, 2, and 3 is  controlled by
	a single bit in the Event Control Register.  If this bit is a '1'
	positive edges are sensed.   The polarity of bits 4, 5, 6, and 7
	is  controlled by  a different bit in the Event Control Register.
	If this bit is a '0' negative  edges  are sensed.   Each time an
	input changes state it will  be  sensed by either the positive or
	negative  edge  sense programmed into the Event Control Register.
	Change of state input pairs are numbered 0 to 23.
	These routines  must be attached  to  the  appropriate  interrupt
	exception vectors before trying to use this  type  of  interrupt.
	See the supplied example program "drvr470.c"  and  the "infoexcp"
	text file in  the  "EXCEPTION" directory  for  an  explanation of
	attaching these routines to interrupt exception vectors.

	  calling sequence:

	     This  module is not called directly.  The included  routines
	     are attached to interrupt exception vectors and are used  to
	     service interrupts.


	lev470() -  This function  is  used  to used to perform the Level
	interrupt handling.    These  routines  must  be attached to  the
	appropriate interrupt exception vectors before trying to use this
	type of interrupt.   See the supplied example program "drvr470.c"
	and the  "infoexcp"  text  file  in the "EXCEPTION" directory for
	an explanation of attaching these routines to interrupt  vectors.

	  calling sequence:

	     This  module is not called directly.  The included  routines
	     are attached to interrupt exception vectors and are used  to
	     service interrupts.




				   11








	carrier.c - This module configures the  Acromag  carrier  board to
	cause interrupts.   Other carrier  boards  may  require  different
	configurations  to cause interrupts.   The  user  should  make the
	required modifications in "carrier.c" and in the interrupt service
	routines, if needed.

	  calling sequence:

	     void = carrier(map_ptr);

	     where:
		  map_ptr  - (structure  pointer)  Pointer to  the  board
			     memory map structure.



	8. Description of Support Programs

	Following  is  a  description of the support  files  and  program
	modules  which  provide  examples  for  the  use  of  the library
	programs.

	drvr470.c  - This  is a program which demonstrates the  usage  of
	the library modules.   This program is menu driven and allows the
	user to become familiar with the  IP470  board  and  the  library
	software.   The user may,  through menu  selections,   configure,
	read from and write to the board.

	makefile  - This  is  a  "makefile"  for  compiling  and  linking
	library routines for the IP470 board.  It does  not  compile  the
	interrupt exception related support routines in  the  "EXCEPTION"
	subdirectory.	They  must  be  compiled  using the "makefile" in
	their subdirectory.
























				   12




