<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<FONT FACE="Comic Sans MS,Arial, Helvetica">
<BLOCKQUOTE>
<H1><A NAME=Main>CtrlInfoI Class</A></H1>

A value is archived with control information.
Several values might share the same control information
for efficiency.
<BR>
The control information is variable in size
because it holds units or state strings.
<H2>Interface</H2>
<UL>
<LI>
Type of Value:
<PRE>
typedef enum
{
	Invalid = 0,
	Numeric = 1,
	Enumerated = 2
}	Type;
Type getType () const;
</PRE>
<LI>
Read Control Information:
Numeric precision, units,
high/low limits for display etc.:
<PRE>
long getPrecision () const;
const char *getUnits () const;
float getDisplayHigh () const;
float getDisplayLow () const;
float getHighAlarm () const;
float getHighWarning () const;
float getLowWarning () const;
float getLowAlarm () const;
</PRE>
<LI>
Initialize a Numeric CtrlInfo
(sets Type to Numeric and then sets fields)
<PRE>
void setNumeric (long prec, const stdString &units,
				float disp_low, float disp_high,
				float low_alarm, float low_warn, float high_warn, float high_alarm);
</PRE>
<LI>
Initialize an Enumerated CtrlInfo
<PRE>
void setEnumerated (size_t num_states, char *strings[]);
</PRE>
<LI>
Format a double value according to precision<BR>
Throws Invalid if CtrlInfo is not for Numeric
<PRE>
void formatDouble (double value, stdString &result) const;
</PRE>
<LI>
Enumerated: state string
<PRE>
size_t getNumStates () const;
void getState (size_t state, stdString &result) const;
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</FONT>
</P>
</BODY>
