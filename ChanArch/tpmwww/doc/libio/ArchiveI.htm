<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<FONT FACE="Comic Sans MS,Arial, Helvetica">
<BLOCKQUOTE>
<H1><A NAME=Main>ArchiveI Class</A></H1>

The ArchiveI class is the top-level interface
to the ChannelArchiver data files.
<P>
Like <A HREF="ChannelIteratorI.htm#Main">ChannelIteratorI</A>,
<A HREF="ValueIteratorI.htm#Main">ValueIteratorI</A> etc.
this class defines an <I>interface</I>.
<BR>
You cannot instantiate an ArchiveI class but only obtain
a pointer to one from a factory class that
implements the actual routines.
<P>
<UL>
<LI><A HREF="BinArchive.htm#Main">BinArchive</A> handles access to the original, binary data format.
<LI><A HREF="MultiArchive.htm#Main">MultiArchive</A> allows simultaneous read-access to multiple archives
</UL>
<P>
Client programs might prefer to use the "smart pointer" <A HREF="Archive.htm#Main">Archive</A>
instead of the raw ArchiveI interface pointer.
<P>
<H2>Multiple, Simultaneous Access</H2>
The ChannelArchiver API is not thread-safe,
additional semaphores are needed for multi-threaded access.
<BR>
Within a single thread, multiple archives can be used.
For each <A HREF="Archive.htm#Main">Archive</A>, more than one CLASS ChannelIterator can be obtained.
For each ChannelIterator, a single <A HREF="ValueIterator.htm#Main">ValueIterator</A> can be used.
This allows to read multiple channels from many archives at once.
To access values for the <I>same</I> channel from different points in time,
multiple ChannelIterators (each set to the same channel) must be used.
<BR>
<H2>Interface</H2>
<UL>
<LI>
Factory methods to create archive-specific iterators and values,
<BR>
See <A HREF="ChannelIteratorI.htm#Main">ChannelIteratorI</A>,
<A HREF="ValueIteratorI.htm#Main">ValueIteratorI</A>,
<A HREF="ValueI.htm#Main">ValueI</A>.
<PRE>
virtual ChannelIteratorI *newChannelIterator () const = 0;
virtual ValueIteratorI *newValueIterator () const = 0;
virtual ValueI *newValue (DbrType type, DbrCount count) = 0;
</PRE>
<LI>
Make Channel iterator point to first channel.
(ChannelIteratorI has to exist,
 for creation see newChannelIterator() below)
<PRE>
virtual bool findFirstChannel (ChannelIteratorI *channel) = 0;
</PRE>
<LI>
Find channel by exact name or regular expression pattern
<PRE>
virtual bool findChannelByName (const stdString &name, ChannelIteratorI *channel) = 0;
virtual bool findChannelByPattern (const stdString &regular_expression, ChannelIteratorI *channel) = 0;
</PRE>
<LI>
Add new channel to archive
(undefined behaviour if channel exists before,
check with findChannelByName() to avoid problems)
<PRE>
virtual bool addChannel (const stdString &name, ChannelIteratorI *channel) = 0;
};
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</FONT>
</P>
</BODY>
