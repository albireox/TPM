<HTML>
<HEAD>
<TITLE>Class Documentation</TITLE>
<BODY BGCOLOR=#F0F0FF BACKGROUND="../blueback.jpg">
<FONT FACE="Comic Sans MS,Arial, Helvetica">
<BLOCKQUOTE>
<H1><A NAME=Main>Configuration Class</A></H1>

Interface for defining (persistent) configuration information:
<BR>
When asked to,
the Configuration class is supposed to use the public interface
of the <A HREF="Engine.htm#Main">Engine</A> class to load and save the
state of the Engine.
<BR>
The default Configuration is <A HREF="ConfigFile.htm#Main">ConfigFile</A>.
Whoever intends to implement another Configuration system
should
<UL>
<LI>derive from class Configuration
<LI>instantiate that new class in main()
<LI>connect theEngine to it by calling
<PRE>
void setConfiguration (Configuration *c);
</PRE>
just before entering the main loop.
</UL>
<H2>Interface</H2>
<UL>
<LI>
These have to be implemented
so that the <A HREF="Engine.htm#Main">Engine</A> (or HTTPD) can load
the whole configuration or (re-)load a specifig group.
<PRE>
virtual bool load (const stdString &config_name) = 0;
virtual bool loadGroup  (const stdString &group_name) = 0;
</PRE>
<LI>
Called when Engine's whole configuration should be saved
<PRE>
virtual bool save ();
</PRE>
<LI>
Called when Engine's configuration has been changed,
for example the default period etc., not Group or Channel Information.
<BR>
Default implementation: call save()
<PRE>
virtual bool saveEngine ();
</PRE>
<LI>
Called when Channel's configuration has been changed
<BR>
Default implementation: call save()
<PRE>
virtual bool saveChannel (const class ChannelInfo *channel);
</PRE>
<LI>
Called when Groups's configuration has been changed
<BR>
Default implementation: call save()
<PRE>
virtual bool saveGroup (const class GroupInfo *group);
};
</PRE>
</UL>
<HR WIDTH=40% ALIGN=LEFT>
<A HREF="index.htm#Main">Index</A>
<P ALIGN=CENTER>
<FONT SIZE=1>
Created from sources with <I>MakeDoc</I> Perl script.
</FONT>
</BLOCKQUOTE>
</FONT>
</P>
</BODY>
